import numpy as npnimport matplotlib.pyplot as pltnfrom sklearn.linear_model import LinearRegressionnfrom sklearn.model_selection import train_test_splitnfrom sklearn.metrics import mean_squared_error, r2_scorenn# サンプルデータの生成nprint("機械学習サンプルプログラムへようこそ！")nprint("線形回帰の例を実行します")nn# データ生成nX = np.random.rand(100, 1) * 10ny = 2 * X + 1 + np.random.randn(100, 1) * 0.5nnprint(f"データポイント数: {len(X)}")nprint(f"特徴量の形状: {X.shape}")nprint(f"ターゲットの形状: {y.shape}")nn# データ分割nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)nnprint(f"\n訓練データ: {X_train.shape[0]} サンプル")nprint(f"テストデータ: {X_test.shape[0]} サンプル")nn# モデルの訓練nmodel = LinearRegression()nmodel.fit(X_train, y_train)nn# 予測nX_pred = np.linspace(0, 10, 100).reshape(-1, 1)ny_pred = model.predict(X_pred)nn# 結果の表示nprint(f"\nモデルの係数: {model.coef_[0][0]:.4f}")nprint(f"切片: {model.intercept_[0]:.4f}")nn# テストデータでの評価ny_test_pred = model.predict(X_test)nmse = mean_squared_error(y_test, y_test_pred)nr2 = r2_score(y_test, y_test_pred)nnprint(f"\nテストデータでの評価:")nprint(f"平均二乗誤差: {mse:.4f}")nprint(f"決定係数: {r2:.4f}")nnprint("\nプログラムが完了しました！")nprint("注意: このプログラムを実行するには scikit-learn, matplotlib, numpy が必要です")